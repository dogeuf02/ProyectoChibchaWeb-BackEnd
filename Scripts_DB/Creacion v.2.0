
/* --- 1. Creación de ENUMS --- */
CREATE TYPE estado_usuario_enum AS ENUM ('ACTIVO','INACTIVO','PENDIENTE');
CREATE TYPE prioridad_enum AS ENUM ('Baja', 'Media', 'Alta');
CREATE TYPE estado_ticket_enum AS ENUM ('Abierto', 'En Progreso', 'Cerrado', 'Escalado');
CREATE TYPE estado_solicitud_enum AS ENUM ('Aprobada', 'Rechazada', 'En Revisión');
/* actualizado */
CREATE TYPE cargo_empleado_enum AS ENUM ('Tecnico nv 1','Tecnico nv 2','Tecnico nv 3',
'Coordinador nv 1','Coordinador nv 2','Coordinador nv 3');
CREATE TYPE rol_usuario_enum AS ENUM ('Cliente', 'Administrador', 'Empleado','Distribuidor');
CREATE TYPE estado_dominio_enum AS ENUM ('Disponible', 'En Uso', 'Reservado');
/*actualizado*/
CREATE TYPE tipo_medio_pago_enum AS ENUM ('Debito','Credito','PSE');
CREATE TYPE estado_plan_enum AS ENUM ('Activo', 'Vencido', 'Cancelado');

/* --- 2. Tablas base sin dependencias --- */
CREATE TABLE TIPO_DOCUMENTO_EMP (
   NOMBRE_TIPO_DOC VARCHAR(20) NOT NULL,
   CONSTRAINT PK_TIPO_DOCUMENTO_EMP PRIMARY KEY (NOMBRE_TIPO_DOC)
);

CREATE TABLE REGISTRADOR (
   ID_REGISTRADOR SERIAL NOT NULL,
   NOMBRE_REGISTRADOR VARCHAR(150) NOT NULL,
   CORREO_registrador VARCHAR(150) NOT NULL,
   CONSTRAINT PK_REGISTRADOR PRIMARY KEY (ID_REGISTRADOR)
);


CREATE TABLE ADMINISTRADOR (
   ID_ADMIN SERIAL NOT NULL,
   NOMBRE_ADMIN VARCHAR(50) NOT NULL,
   APELLIDO_ADMIN VARCHAR(50) NOT NULL,
   FECHA_NACIMIENTO_ADMIN DATE,
   CONSTRAINT PK_ADMINISTRADOR PRIMARY KEY (ID_ADMIN)
);

/*Actualizacion*/

CREATE TABLE PLAN_CLIENTE (
    ID_PLAN_CLIENTE SERIAL NOT NULL,
    NOMBRE_PLAN_CLIENTE VARCHAR(150) NOT NULL,
    NUMERO_WEBS INTEGER NOT NULL,
    NUMERO_BASE_DATOS INTEGER NOT NULL,
    ALMACENAMIENTO_NVME INTEGER NOT NULL,
    NUMERO_CUENTAS_CORREO INTEGER NOT NULL,
    CREADOR_WEB BOOLEAN NOT NULL,
    NUMERO_CERTIFICADO_SSL_HTTPS INTEGER NOT NULL,
    EMAIL_MARKETING BOOLEAN NOT NULL,
    CONSTRAINT PK_PLAN_CLIENTE PRIMARY KEY (ID_PLAN_CLIENTE)
);


CREATE TABLE EMPLEADO (
   ID_EMPLEADO SERIAL NOT NULL,
   NOMBRE_EMPLEADO VARCHAR(50) NOT NULL,
   APELLIDO_EMPLEADO VARCHAR(50) NOT NULL,
   CARGO_EMPLEADO cargo_empleado_enum NOT NULL,
   CONSTRAINT PK_EMPLEADO PRIMARY KEY (ID_EMPLEADO)
);

CREATE TABLE TLD (
   TLD VARCHAR(63) NOT NULL,
   CONSTRAINT PK_TLD PRIMARY KEY (TLD)
);

/*ACTUALIZADA*/
CREATE TABLE CLIENTE_DIRECTO (
   ID_CLIENTE SERIAL NOT NULL,
   ID_PLAN_CLIENTE INT NULL,
   NOMBRE_CLIENTE VARCHAR(50) NOT NULL,
   APELLIDO_CLIENTE VARCHAR(50) NOT NULL,
   TELEFONO VARCHAR(20) NOT NULL,
   FECHA_NACIMIENTO_CLIENTE DATE NULL,
   CONSTRAINT PK_CLIENTE_DIRECTO PRIMARY KEY (ID_CLIENTE),
   CONSTRAINT FK_CLIENTE_PLAN_CLIENTE FOREIGN KEY (ID_PLAN_CLIENTE) 
       REFERENCES PLAN_CLIENTE(ID_PLAN_CLIENTE) 
       ON DELETE SET NULL,
   CONSTRAINT CHK_FECHA_NACIMIENTO CHECK (FECHA_NACIMIENTO_CLIENTE <= CURRENT_DATE)
);

/*Creacion tabla categoria distribuidor*/
CREATE TABLE CATEGORIA_DISTRIBUIDOR (
    ID_CATEGORIA SERIAL NOT NULL,
    NOMBRE_CATEGORIA VARCHAR(100) NOT NULL,
    PRECIO_CATEGORIA NUMERIC(10,2) NOT NULL,
    CONSTRAINT PK_CATEGORIA_DISTRIBUIDOR PRIMARY KEY (ID_CATEGORIA)
);

/*ACTUALIZADA*/

CREATE TABLE DISTRIBUIDOR (
   ID_DISTRIBUIDOR SERIAL,
   NOMBRE_TIPO_DOC VARCHAR(20) NOT NULL,
   NUMERO_DOC_EMPRESA VARCHAR(20) NOT NULL,
   NOMBRE_EMPRESA VARCHAR(255) NOT NULL,
   DIRECCION_EMPRESA VARCHAR(255) NOT NULL,
   ID_CATEGORIA INTEGER,
   CONSTRAINT PK_DISTRIBUIDOR PRIMARY KEY (ID_DISTRIBUIDOR),
   CONSTRAINT FK_DISTRIBUIDOR_TDOC FOREIGN KEY (NOMBRE_TIPO_DOC)
       REFERENCES TIPO_DOCUMENTO_EMP(NOMBRE_TIPO_DOC),
   CONSTRAINT FK_DISTRIBUIDOR_CATEGORIA FOREIGN KEY (ID_CATEGORIA)
       REFERENCES CATEGORIA_DISTRIBUIDOR(ID_CATEGORIA)
);


CREATE TABLE USUARIO (
   ID_USUARIO SERIAL PRIMARY KEY,
   ID_CLIENTE INT NULL,
   ID_ADMIN INT NULL,
   ID_EMPLEADO INT NULL,
   ID_DISTRIBUIDOR INT NULL,
   CORREO_USUARIO VARCHAR(150) UNIQUE NOT NULL,
   CONTRASENA VARCHAR(150) NOT NULL,
   ROL rol_usuario_enum NOT NULL,
   ESTADO estado_usuario_enum NOT NULL,
   CONSTRAINT FK_USUARIO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE_DIRECTO(ID_CLIENTE),
   CONSTRAINT FK_USUARIO_ADMIN FOREIGN KEY (ID_ADMIN) REFERENCES ADMINISTRADOR(ID_ADMIN),
   CONSTRAINT FK_USUARIO_EMPLEADO FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO),
   CONSTRAINT FK_USUARIO_DISTRIBUIDOR FOREIGN KEY (ID_DISTRIBUIDOR) REFERENCES DISTRIBUIDOR(ID_DISTRIBUIDOR)
);

/*ACTUALIZADA*/
CREATE TABLE TICKET (
   ID_TICKET VARCHAR(100) NOT NULL,
   ID_DISTRIBUIDOR INT NULL,
   ID_CLIENTE INT NULL,
   ID_EMPLEADO INT NULL,
   ASUNTO VARCHAR(100) NOT NULL,
   DESCRIPCION TEXT NULL,
   PRIORIDAD prioridad_enum NULL,
   ESTADO estado_ticket_enum NOT NULL,
   CONSTRAINT PK_TICKET PRIMARY KEY (ID_TICKET),
   CONSTRAINT FK_TICKET_DISTRIBUIDOR FOREIGN KEY (ID_DISTRIBUIDOR) REFERENCES DISTRIBUIDOR(ID_DISTRIBUIDOR),
   CONSTRAINT FK_TICKET_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE_DIRECTO(ID_CLIENTE),
   CONSTRAINT FK_TICKET_EMPLEADO FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO),
   CONSTRAINT CHK_SOLICITANTE_TICKET CHECK (
      (ID_CLIENTE IS NOT NULL AND ID_DISTRIBUIDOR IS NULL) OR
      (ID_CLIENTE IS NULL AND ID_DISTRIBUIDOR IS NOT NULL)
   )
);


CREATE TABLE HISTORIAL_TICKET_USUARIO (
   ID_TICKET VARCHAR(100) NOT NULL,
   ID_EMPLEADO INT NOT NULL,
   CONSTRAINT PK_SOLUCION PRIMARY KEY (ID_TICKET, ID_EMPLEADO),
   CONSTRAINT FK_SOLUCION_TICKET FOREIGN KEY (ID_TICKET) REFERENCES TICKET(ID_TICKET),
   CONSTRAINT FK_SOLUCION_EMPLEADO FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO)
);

CREATE TABLE DOMINIO(
  ID_DOMINIO SERIAL NOT NULL,
  TLD VARCHAR(63) NOT NULL,
  NOMBRE_DOMINIO VARCHAR(263) NOT NULL,
  PRECIO_DOMINIO integer NULL,
  ESTADO estado_dominio_enum,
  CONSTRAINT PK_DOMINIO PRIMARY KEY (ID_DOMINIO),
  CONSTRAINT FK_DOMINIO_TLD FOREIGN KEY (TLD)REFERENCES TLD(TLD)
);

/* --- 4. Tabla de solicitudes de dominio ACTUALIZADA --- */
CREATE TABLE SOLICITUD_DOMINIO (
   ID_SOLICITUD SERIAL NOT NULL,
   ID_CLIENTE INT NULL,
   ID_DISTRIBUIDOR INT NULL,
   ID_DOMINIO INT NOT NULL,
   ID_ADMIN INT NULL,
   ESTADO_SOLICITUD estado_solicitud_enum NOT NULL DEFAULT 'En Revisión',
   FECHA_SOLICITUD DATE NOT NULL,
   FECHA_APROBACION DATE NULL,

   CONSTRAINT PK_SOLICITUD_DOMINIO PRIMARY KEY(ID_SOLICITUD),
   CONSTRAINT FK_SOLICITUD_DOMINIO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE_DIRECTO(ID_CLIENTE),
   CONSTRAINT FK_SOLICITUD_DOMINIO_DISTRIBUIDOR FOREIGN KEY (ID_DISTRIBUIDOR) REFERENCES DISTRIBUIDOR(ID_DISTRIBUIDOR),
   CONSTRAINT FK_SOLICITUD_DOMINIO_DOMINIO FOREIGN KEY (ID_DOMINIO) REFERENCES DOMINIO(ID_DOMINIO),
   CONSTRAINT FK_SOLICITUD_DOMINIO_ADMIN FOREIGN KEY (ID_ADMIN) REFERENCES ADMINISTRADOR(ID_ADMIN),
   CONSTRAINT CHK_UNO_SOLICITANTE CHECK (
       (ID_CLIENTE IS NOT NULL AND ID_DISTRIBUIDOR IS NULL) OR
       (ID_CLIENTE IS NULL AND ID_DISTRIBUIDOR IS NOT NULL)
   )
);


CREATE TABLE BANCO (
   ID_BANCO SERIAL PRIMARY KEY,
   NOMBRE_BANCO VARCHAR(100) NOT NULL
);

/*ACTUALIZADA*/

CREATE TABLE MEDIO_PAGO (
   ID_MEDIO_PAGO SERIAL PRIMARY KEY,
   ID_CLIENTE INT NULL,
   TIPO_MEDIO_PAGO tipo_medio_pago_enum NOT NULL,
   ID_DISTRIBUIDOR INT NULL,
   NOMBRE_TITULAR VARCHAR(100) NOT NULL,
   NUMERO_TARJETA_CUENTA VARCHAR(20),
   ID_BANCO INT,
   CORREO_PSE VARCHAR(100),
   FECHA_REGISTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

   CONSTRAINT FK_MP_CLIENTE FOREIGN KEY (ID_CLIENTE)
       REFERENCES CLIENTE_DIRECTO(ID_CLIENTE) ON DELETE SET NULL,

   CONSTRAINT FK_MP_DISTRIBUIDOR FOREIGN KEY (ID_DISTRIBUIDOR)
       REFERENCES DISTRIBUIDOR(ID_DISTRIBUIDOR) ON DELETE SET NULL,

   CONSTRAINT FK_MP_BANCO FOREIGN KEY (ID_BANCO)
       REFERENCES BANCO(ID_BANCO) ON DELETE SET NULL,

   CONSTRAINT CHK_DUENO_UNICO CHECK (
       (ID_CLIENTE IS NOT NULL AND ID_DISTRIBUIDOR IS NULL) OR
       (ID_CLIENTE IS NULL AND ID_DISTRIBUIDOR IS NOT NULL)
   )
);


/*creacion tabla plan pago*/
CREATE TABLE PLAN_PAGO (
    ID_PLAN_PAGO SERIAL NOT NULL,
    INTERVALO_PAGO VARCHAR(50) NOT NULL,
    CONSTRAINT PK_PLAN_PAGO PRIMARY KEY (ID_PLAN_PAGO)
);


CREATE TYPE estado_pago_enum AS ENUM ('Pagado', 'Pendiente', 'Fallido');
CREATE TYPE estado_comision_enum AS ENUM ('Pendiente', 'Pagada', 'Anulada');

CREATE TABLE PLAN_ADQUIRIDO (
    ID_PLAN_ADQUIRIDO SERIAL NOT NULL,
    ID_CLIENTE INTEGER NOT NULL,
    ID_PLAN_CLIENTE INTEGER NOT NULL,
    ID_PLAN_PAGO INTEGER NOT NULL,
    ESTADO_PLAN estado_plan_enum NOT NULL DEFAULT 'Activo',
    FECHA_COMPRA DATE NOT NULL,
    FECHA_EXPIRACION DATE NOT NULL,
    FECHA_ACTUALIZACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT PK_PLAN_ADQUIRIDO PRIMARY KEY (ID_PLAN_ADQUIRIDO),
    CONSTRAINT UQ_CLIENTE_PLAN UNIQUE (ID_CLIENTE, ID_PLAN_CLIENTE),
    CONSTRAINT FK_PLAN_ADQUIRIDO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE_DIRECTO(ID_CLIENTE),
    CONSTRAINT FK_PLAN_ADQUIRIDO_PLAN FOREIGN KEY (ID_PLAN_CLIENTE) REFERENCES PLAN_CLIENTE(ID_PLAN_CLIENTE),
    CONSTRAINT FK_PLAN_ADQUIRIDO_PAGO FOREIGN KEY (ID_PLAN_PAGO) REFERENCES PLAN_PAGO(ID_PLAN_PAGO)
);

CREATE TABLE FACTURA (
    ID_FACTURA SERIAL PRIMARY KEY,
    ID_PLAN_ADQUIRIDO INTEGER NOT NULL,
    ID_MEDIO_PAGO INTEGER NOT NULL,
    FECHA_FACTURACION DATE NOT NULL DEFAULT CURRENT_DATE,
    TOTAL NUMERIC(10,2) NOT NULL,
    ESTADO_PAGO estado_pago_enum NOT NULL DEFAULT 'Pendiente',

    CONSTRAINT FK_FACTURA_PLAN_ADQUIRIDO FOREIGN KEY (ID_PLAN_ADQUIRIDO)
        REFERENCES PLAN_ADQUIRIDO(ID_PLAN_ADQUIRIDO),
    CONSTRAINT FK_FACTURA_MEDIO_PAGO FOREIGN KEY (ID_MEDIO_PAGO)
        REFERENCES MEDIO_PAGO(ID_MEDIO_PAGO)
);

CREATE TABLE COMISION (
    ID_COMISION SERIAL PRIMARY KEY,
    ID_DISTRIBUIDOR INTEGER NOT NULL,
    ID_MEDIO_PAGO INTEGER NOT NULL,
    VALOR_COMISION NUMERIC(10,2) NOT NULL,
    FECHA_PAGO DATE NOT NULL,
    ESTADO_COMISION estado_comision_enum NOT NULL DEFAULT 'Pendiente',

    CONSTRAINT FK_COMISION_DISTRIBUIDOR FOREIGN KEY (ID_DISTRIBUIDOR)
        REFERENCES DISTRIBUIDOR(ID_DISTRIBUIDOR),

    CONSTRAINT FK_COMISION_MEDIO_PAGO FOREIGN KEY (ID_MEDIO_PAGO)
        REFERENCES MEDIO_PAGO(ID_MEDIO_PAGO)
);

CREATE TABLE token_verificacion (
    id SERIAL PRIMARY KEY,
    token VARCHAR(255) NOT NULL UNIQUE,
    id_usuario INT NOT NULL,
    fecha_expiracion TIMESTAMP NOT NULL,
    estado BOOLEAN NOT NULL DEFAULT FALSE,
    creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    actualizado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_token_verif_usuario FOREIGN KEY (id_usuario)
        REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE
);
